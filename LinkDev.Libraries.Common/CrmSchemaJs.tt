<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".js" #>
<#@ parameter type="CrmCodeGenerator.VSPackage.Model.Context" name="Context"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CrmCodeGenerator.VSPackage.Model" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="System.Globalization"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<# // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Template version 6.13.1 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< #>
<# // >>>>>>>>>> MINIMUM COMPATIBLE VERSION to successfully generate the schema using this template is 5.6.1. <<<<<<<<<< #>
//         Project / File: <#= Context.Namespace #> / <#= Context.FileName #>.js
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

"use strict";

var Sdk = window.Sdk || { __namespace: true };

<# foreach (var entity in Context.Entities.Where(entity => Context.PluginMetadataEntities.Contains(entity.LogicalName))) {
        var entityFilterList = Context.EntityDataFilterArray;
        var entityFilter = entityFilterList.EntityFilters.First(filter => filter.IsDefault)
			.EntityFilterList.First(filter => filter.LogicalName == entity.LogicalName);
        var crmEntityName = entityFilter.EntityRename ?? (Context.UseDisplayNames ? entity.FriendlyName : entity.HybridName);
#>
Sdk.<#=crmEntityName#> =
{
<#
for(var i = 0; i < entity.Fields.Length; i++) { 

	var attribute = entity.Fields[i];
	
	if(attribute.Attribute.IsEntityReferenceHelper)
        continue;

	if(attribute.Attribute.IsEntityReferenceHelper
	|| attribute.LocalizedLabels == null || !attribute.LocalizedLabels.Any())
	{
		continue;
	}

    var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty(entityFilter.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName) : attribute.DisplayName;
#>
	 <#=attributeName#>: "<#=attribute.Attribute.LogicalName#>"<# if (i < entity.Fields.Length - 1) { #>,<# } #>

<# } #>
};

Sdk.<#=crmEntityName#>.DisplayName = <#=ToLiteral(entity.Label)#>;
Sdk.<#=crmEntityName#>.SchemaName = "<#=entity.SchemaName#>";
Sdk.<#=crmEntityName#>.EntityLogicalName = "<#=entity.LogicalName#>";

<# if (entity.Enums.Any()) { foreach(var enm in entity.Enums) {
        var attribute = entity.Fields.FirstOrDefault(field => field.LogicalName == enm.LogicalName);
        var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty(entityFilter.AttributeRenames, attribute.Attribute.LogicalName) ?? enm.FriendlyName) : enm.DisplayName;
#>
Sdk.<#=crmEntityName#>.<#= attributeName #>Enum =
{
<# foreach(var item in enm.Items) { #>
	<#= item.Name #>: <#= item.Value #><# if (enm.Items.ToList().IndexOf(item) < enm.Items.Length - 1) { #>,<# } #>

<# } #>
}

<# } #>
<# } #>

Sdk.<#=crmEntityName#>.Schema =
{
<#foreach(var attribute in entity.Fields) { #>
<#	if(attribute.Attribute.IsEntityReferenceHelper)
        continue;
            var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty(entityFilter.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName) : attribute.DisplayName;
#>
	<#=attributeName#>: "<#=attribute.SchemaName#>"<# if (entity.Fields.ToList().IndexOf(attribute) < entity.Fields.Length - 1) { #>,<# } #>

<#}#>
}

Sdk.<#=crmEntityName#>.Labels =
{
<# 
var IsFieldLabelCommaDraw = false;

for(var i = 0; i < entity.Fields.Length; i++) { 

	var attribute = entity.Fields[i];

	if(attribute.Attribute.IsEntityReferenceHelper
	|| attribute.LocalizedLabels == null || !attribute.LocalizedLabels.Any())
	{
        continue;
	}

	if (i > 0 && attribute.LocalizedLabels != null && attribute.LocalizedLabels.Any()
	 && IsFieldLabelCommaDraw)
	{
		Write(",");
	}

	IsFieldLabelCommaDraw = true;

    var attributeName = Context.UseDisplayNames ? (FirstNotNullOrEmpty(entityFilter.AttributeRenames, attribute.Attribute.LogicalName) ?? attribute.FriendlyName) : attribute.DisplayName;
#>
<# if (attribute.LocalizedLabels != null && attribute.LocalizedLabels.Any()) { #>
	<#= attributeName #>:
	{
<# foreach(var fLoc in attribute.LocalizedLabels) { #>
		_<#= fLoc.LanguageCode #>: <#= ToLiteral(fLoc.Label) #><# if (attribute.LocalizedLabels.ToList().IndexOf(fLoc) < attribute.LocalizedLabels.Length - 1) { #>,<# } #>

<# } #>
	}

<# } #>
<# } IsFieldLabelCommaDraw = false; #>
}

Sdk.<#=crmEntityName#>.Relations =
{
	OneToN:
	{
<#
var relationArray1N = entity.RelationshipsOneToMany.ToList();
foreach(var attribute in relationArray1N)	{
			var relationName = FirstNotNullOrEmpty(entityFilter.OneToNRenames, attribute.SchemaName) ?? attribute.FriendlyName ?? attribute.SchemaName;
#>
<# if(attribute.SchemaName == "calendar_calendar_rules" || attribute.SchemaName == "service_calendar_rules") { #>
		<#=relationName #>: "calendarrules"<# if (relationArray1N.IndexOf(attribute) < relationArray1N.Count - 1) { #>,<# } #>

<# } else { #>
		<#= relationName #>: "<#=attribute.SchemaName#>"<# if (relationArray1N.IndexOf(attribute) < relationArray1N.Count - 1) { #>,<# } #>

<# } #>
<# } #>
	},
			
	NToOne:
	{
<#
var relationArrayN1 = entity.RelationshipsManyToOne.ToList();
			var addComma = false;
foreach(var attribute in relationArrayN1)	{
			addComma = true;
			var relationName = FirstNotNullOrEmpty(entityFilter.NToOneRenames, attribute.SchemaName) ?? attribute.FriendlyName ?? attribute.SchemaName;
#>
		<#=relationName#>: "<#=attribute.SchemaName#>"<# if (relationArrayN1.IndexOf(attribute) < relationArrayN1.Count - 1) { #>,<# } #>

<# } #><#= addComma ? "," : "" #>
		Lookups:
		{
<#
var lookupArray = entity.RelationshipsManyToOne.ToList();
foreach(var attribute in lookupArray)	{
			var relationName = FirstNotNullOrEmpty(entityFilter.NToOneRenames, attribute.SchemaName) ?? attribute.FriendlyName ?? attribute.SchemaName;
#>
			<#=relationName#>: "<#=attribute.LogicalName#>"<# if (lookupArray.IndexOf(attribute) < lookupArray.Count - 1) { #>,<# } #>

<# } #>
		}
	},

	NToN:
	{
<#
var relationArrayNN = entity.RelationshipsManyToMany.ToList();
foreach(var attribute in relationArrayNN)	{
			var relationName = FirstNotNullOrEmpty(entityFilter.NToNRenames, attribute.SchemaName) ?? attribute.FriendlyName ?? attribute.SchemaName;
#>
		<#=relationName#>: "<#=attribute.SchemaName#>"<# if (relationArrayNN.IndexOf(attribute) < relationArrayNN.Count - 1) { #>,<# } #>

<# } #>
	}
}

<# } #>

<#+
    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

    private static TValue FirstNotNullOrDefault<TKey, TValue>(IDictionary<TKey, TValue> dictionary, params TKey[] keys)
    {
      return Enumerable.FirstOrDefault<TValue>(Enumerable.Select<TKey, TValue>(Enumerable.Where<TKey>((IEnumerable<TKey>) keys, new Func<TKey, bool>(dictionary.ContainsKey)), (Func<TKey, TValue>) (key => dictionary[key])));
    }

    private static string FirstNotNullOrEmpty<TKey>(IDictionary<TKey, string> dictionary, params TKey[] keys)
    {
        return Enumerable.FirstOrDefault<string>(Enumerable.Select<TKey, string>(Enumerable.Where<TKey>((IEnumerable<TKey>)keys, (Func<TKey, bool>)(key =>
        {
            if (dictionary.ContainsKey(key))
                return !string.IsNullOrEmpty(dictionary[key]);
            return false;
        })), (Func<TKey, string>)(key => dictionary[key])));
    }
#>
